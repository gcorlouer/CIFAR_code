%% Parameters 

if ~exist('subject', 'var') subject = 'DiAs'; end
if ~exist('task', 'var') task = 'stimuli_1'; end
if ~exist('BP','var') BP = false; end
if ~exist('cat','var') cat = 'Face'; end % Presented category

% Modeling
if ~exist('multitrial', 'var') multitrial = true; end
if ~exist('mosel', 'var') mosel = 4; end 

regmode = 'LWR';
alpha = 0.05;
mhtc = 'FDRD';
nperms = 100;

%% Import data

[X, dataset] = import_preproc_data('cat', cat, 'multitrial', multitrial, 'task', task, 'BP', BP);

ch_names = dataset.chan;
ROIs = dataset.brodman;
category = dataset.category;
DK = dataset.DK;

[nchans, nobs, ntrials] = size(X);
% Return Face, place, and bicat channel indices
chan_type = ['F','P','B'];
iF = cat2icat(category, 'F');
iP = cat2icat(category, 'P');
iB = cat2icat(category, 'B');
category = category(:,1);
%% Modeling

% VAR model 
tic
[VARmodel, VARmoest] = VARmodeling(X, 'momax', 30, 'mosel', mosel, 'multitrial', multitrial);
toc
% SS model

tic
[SSmodel, SSmoest] = SSmodeling(X, 'mosel', mosel, 'multitrial', multitrial);
toc   

%% Groupwise GC

target_chan = iB;
source_chan = iF;

tic
[F, sig_p] = SSmodel_to_mvgc_permtest(X, SSmodel,target_chan, source_chan);
toc

%% Pairwise GC

tic
[F, sig_p] = SSmodel_to_pwcgc_permtest(X, SSmodel, 'alpha',alpha, 'nperms',nperms);
toc


%% Plot

pdata = {F, sig_p};

ptitle = {'PWCGC (SS estimated)','Permutation test'};

plot_gc(pdata,ptitle,[],[],[]);


%% Plot and compare quantities

subplot(1,2,1)
plot_pcgc(F, category)
title('PWCGC (SS estimated)')
subplot(1,2,2)
plot_pcgc(sig_p, category)
title('Permutation test')

%% Count significant pairwise GC connections 


nsig = count_significant_GC(sig_p, iB,iP);
fprintf('%d significant GC from B to P.\n', nsig);
nsig = count_significant_GC(sig_p, iB,iF);
fprintf('%d significant GC from B to F.\n', nsig);
nsig = count_significant_GC(sig_p, iF,iB);
fprintf('%d significant GC from F to B.\n', nsig);
nsig = count_significant_GC(sig_p, iP,iB);
fprintf('%d significant GC from P to B.\n', nsig);
nsig = count_significant_GC(sig_p, iP,iF);
fprintf('%d significant GC from P to P.\n', nsig);
nsig = count_significant_GC(sig_p, iB,iP);
fprintf('%d significant GC from B to P.\n', nsig);

